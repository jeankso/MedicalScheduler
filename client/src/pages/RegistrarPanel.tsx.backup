import { useEffect, useState } from "react";
import { useAuth } from "@/hooks/useAuth";
import { useToast } from "@/hooks/use-toast";
import { isUnauthorizedError } from "@/lib/authUtils";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { AlertTriangle, CheckCircle, Clock, FileText, Calendar, User, Upload, Download, Paperclip, Eye, RefreshCw, X } from "lucide-react";
import PatientDetailsModal from "@/components/PatientDetailsModal";
import RequestDocumentManager from "@/components/RequestDocumentManager";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import ChangePasswordModal from "@/components/ChangePasswordModal";

export default function RegistrarPanel() {
  const { user, isAuthenticated, isLoading } = useAuth();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedPatientId, setSelectedPatientId] = useState<number | null>(null);
  const [uploadingRequestId, setUploadingRequestId] = useState<number | null>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [selectedRequestForFiles, setSelectedRequestForFiles] = useState<any | null>(null);
  const [completionModalOpen, setCompletionModalOpen] = useState(false);
  const [selectedRequestForCompletion, setSelectedRequestForCompletion] = useState<any | null>(null);
  const [examLocation, setExamLocation] = useState("");
  const [examDate, setExamDate] = useState("");
  const [examTime, setExamTime] = useState("");
  const [resultFile, setResultFile] = useState<File | null>(null);
  const [autoRefreshEnabled, setAutoRefreshEnabled] = useState(true);
  const [activeTab, setActiveTab] = useState("active");
  const [selectedRequestForDocuments, setSelectedRequestForDocuments] = useState<any | null>(null);

  // Redirect to home if not authenticated
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      toast({
        title: "Não autorizado",
        description: "Você precisa estar logado. Redirecionando...",
        variant: "destructive",
      });
      setTimeout(() => {
        window.location.href = "/api/login";
      }, 500);
      return;
    }
  }, [isAuthenticated, isLoading, toast]);

  // Auto-refresh functionality for regulation panel
  useEffect(() => {
    if (!autoRefreshEnabled || !isAuthenticated || !user) return;

    // Only enable auto-refresh for regulation role
    if ((user as any)?.role !== 'regulacao') return;

    const interval = setInterval(() => {
      // Refresh main data queries used by regulation panel
      queryClient.invalidateQueries({ queryKey: ['/api/requests'] });
      queryClient.invalidateQueries({ queryKey: ['/api/requests/urgent'] });
      queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });
    }, 10000); // Refresh every 10 seconds

    return () => clearInterval(interval);
  }, [autoRefreshEnabled, isAuthenticated, user, queryClient]);

  // Fetch dashboard stats
  const { data: stats = { received: 0, accepted: 0, confirmed: 0, completed: 0 } } = useQuery({
    queryKey: ["/api/dashboard/stats"],
    enabled: isAuthenticated,
    retry: false,
  });

  // Fetch urgent requests
  const { data: allUrgentRequests = [] } = useQuery({
    queryKey: ["/api/requests/urgent"],
    enabled: isAuthenticated,
    retry: false,
  });

  // Filter urgent requests to exclude completed ones
  const urgentRequests = Array.isArray(allUrgentRequests) 
    ? allUrgentRequests.filter((request: any) => request.status !== 'completed')
    : [];

  // Fetch all requests
  const { data: allRequests = [] } = useQuery({
    queryKey: ["/api/requests"],
    enabled: isAuthenticated,
    retry: false,
  });

  // Helper function to format CPF
  const formatCPF = (cpf: string) => {
    if (!cpf) return "N/A";
    const cleanCPF = cpf.replace(/\D/g, '');
    if (cleanCPF.length === 11) {
      return cleanCPF.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
    }
    return cpf;
  };

  // Filter and sort requests
  const activeRequests = Array.isArray(allRequests) 
    ? allRequests
        .filter((request: any) => request.status !== 'completed')
        .sort((a: any, b: any) => new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()) // Ascending order (oldest first)
    : [];

  const completedRequests = Array.isArray(allRequests) 
    ? allRequests
        .filter((request: any) => request.status === 'completed')
        .sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()) // Descending order (newest first)
    : [];

  // Status update mutation
  const updateStatusMutation = useMutation({
    mutationFn: async ({ id, status }: { id: number; status: string }) => {
      return await apiRequest(`/api/requests/${id}/status`, "PATCH", { status });
    },
    onMutate: () => {
      // Invalidação imediata para atualização visual mais rápida
      queryClient.invalidateQueries({ queryKey: ["/api/requests"] });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/requests"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      queryClient.invalidateQueries({ queryKey: ["/api/requests/urgent"] });
      toast({
        title: "Status atualizado",
        description: "O status da requisição foi atualizado com sucesso.",
      });
    },
    onError: (error: Error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Sessão expirada",
          description: "Você será redirecionado para fazer login novamente.",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 1000);
        return;
      }
      console.error("Error updating status:", error);
      toast({
        title: "Erro",
        description: "Falha ao atualizar status da requisição.",
        variant: "destructive",
      });
    },
  });

  // Upload attachment mutation
  const uploadMutation = useMutation({
    mutationFn: async ({ requestId, file }: { requestId: number; file: File }) => {
      const formData = new FormData();
      formData.append('attachment', file);
      return await apiRequest(`/api/requests/${requestId}/upload-attachment`, "POST", formData);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/requests"] });
      setSelectedFile(null);
      setUploadingRequestId(null);
      toast({
        title: "Arquivo enviado",
        description: "O anexo foi enviado com sucesso.",
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Sessão expirada",
          description: "Você será redirecionado para fazer login novamente.",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 1000);
        return;
      }
      console.error("Error uploading file:", error);
      toast({
        title: "Erro no upload",
        description: "Falha ao enviar arquivo.",
        variant: "destructive",
      });
    },
  });

  // Complete request mutation
  const completeRequestMutation = useMutation({
    mutationFn: async ({ id, examLocation, examDate, examTime, resultFile }: { 
      id: number; 
      examLocation: string; 
      examDate: string; 
      examTime: string; 
      resultFile: File 
    }) => {
      const formData = new FormData();
      formData.append('examLocation', examLocation);
      formData.append('examDate', examDate);
      formData.append('examTime', examTime);
      formData.append('resultFile', resultFile);
      return await apiRequest(`/api/requests/${id}/complete`, "POST", formData);
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["/api/requests"] });
      queryClient.invalidateQueries({ queryKey: ["/api/dashboard/stats"] });
      
      // Gerar mensagem do WhatsApp
      if (selectedRequestForCompletion) {
        const patient = selectedRequestForCompletion.patient;
        const serviceName = selectedRequestForCompletion.examType?.name || selectedRequestForCompletion.consultationType?.name;
        
        // Gerar URL do resultado (PDF) que será gerado após conclusão
        const resultUrl = `${window.location.origin}/api/requests/${selectedRequestForCompletion.id}/view-result`;

        const message = `Olá ${patient?.name}! 

Sua requisição de ${serviceName} foi aprovada.

📅 Data: ${new Date(examDate).toLocaleDateString('pt-BR')}
⏰ Horário: ${examTime}
📍 Local: ${examLocation}

Por favor, compareça no horário marcado com documento de identidade.

📄 Resultado da solicitação: ${resultUrl}

Atenciosamente,
Secretaria de Saúde de Alexandria/RN`;

        const phoneNumber = patient?.phone?.replace(/\D/g, '') || '';
        const whatsappUrl = `https://wa.me/55${phoneNumber}?text=${encodeURIComponent(message)}`;
        
        // Abrir WhatsApp
        window.open(whatsappUrl, '_blank');
      }
      
      setCompletionModalOpen(false);
      setExamLocation("");
      setExamDate("");
      setExamTime("");
      setResultFile(null);
      setSelectedRequestForCompletion(null);
      toast({
        title: "Requisição concluída",
        description: "A requisição foi concluída e o WhatsApp foi aberto para notificar o paciente.",
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error)) {
        toast({
          title: "Sessão expirada",
          description: "Você será redirecionado para fazer login novamente.",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 1000);
        return;
      }
      console.error("Error completing request:", error);
      toast({
        title: "Erro",
        description: "Falha ao concluir requisição.",
        variant: "destructive",
      });
    },
  });

  const handleStatusChange = (id: number, status: string) => {
    updateStatusMutation.mutate({ id, status });
  };

  const handleResendWhatsApp = (request: any) => {
    const patient = request.patient;
    const serviceName = request.examType?.name || request.consultationType?.name;
    
    // Gerar URL do resultado (PDF)
    const resultUrl = `${window.location.origin}/api/requests/${request.id}/view-result`;

    const message = `Olá ${patient?.name}! 

Sua requisição de ${serviceName} foi aprovada.

📅 Data: ${new Date(request.examDate).toLocaleDateString('pt-BR')}
⏰ Horário: ${request.examTime}
📍 Local: ${request.examLocation}

Por favor, compareça no horário marcado com documento de identidade.

📄 Resultado da solicitação: ${resultUrl}

Atenciosamente,
Secretaria de Saúde de Alexandria/RN`;

    const phoneNumber = patient?.phone?.replace(/\D/g, '') || '';
    const whatsappUrl = `https://wa.me/55${phoneNumber}?text=${encodeURIComponent(message)}`;
    
    // Abrir WhatsApp
    window.open(whatsappUrl, '_blank');
    
    toast({
      title: "WhatsApp enviado",
      description: "O WhatsApp foi aberto com a mensagem para o paciente.",
    });
  };

  const handleCompleteRequest = (request: any) => {
    setSelectedRequestForCompletion(request);
    setCompletionModalOpen(true);
  };

  const handleFileSelect = (e: any) => {
    const file = e.target.files[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const handleFileUpload = (requestId: number, file: File) => {
    if (requestId && file) {
      uploadMutation.mutate({ requestId, file });
    }
  };

  const handleSendWhatsApp = () => {
    if (!selectedRequestForCompletion || !examLocation || !examDate || !examTime || !resultFile) {
      toast({
        title: "Campos obrigatórios",
        description: "Preencha todos os campos e anexe o arquivo de resultado.",
        variant: "destructive",
      });
      return;
    }

    completeRequestMutation.mutate({
      id: selectedRequestForCompletion.id,
      examLocation,
      examDate,
      examTime,
      resultFile,
    });
  };

  const getStatusBadge = (status: string, isUrgent: boolean) => {
    const urgentClass = isUrgent ? "border-red-500 bg-red-50" : "";
    
    switch (status) {
      case 'pending':
        return <Badge variant="secondary" className={`${urgentClass}`}>Aguardando Análise</Badge>;
      case 'accepted':
        return <Badge variant="default" className={`bg-blue-600 ${urgentClass}`}>Aceita</Badge>;
      case 'confirmed':
        return <Badge variant="default" className={`bg-green-600 ${urgentClass}`}>Confirmada</Badge>;
      case 'completed':
        return <Badge variant="default" className={`bg-purple-600 ${urgentClass}`}>Concluída</Badge>;
      default:
        return <Badge variant="secondary" className={`${urgentClass}`}>{status}</Badge>;
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto"></div>
          <p className="mt-4 text-gray-600">Carregando painel...</p>
        </div>
      </div>
    );
  }

  if (!isAuthenticated || !user) {
    return null;
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header with Welcome */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Painel de Regulação</h1>
          <p className="text-gray-600">
            Bem-vindo, {(user as any)?.firstName} {(user as any)?.lastName} ({(user as any)?.username})
          </p>
        </div>
        <div className="flex items-center space-x-4">
          {/* Auto-refresh controls */}
          <div className="flex items-center gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => {
                queryClient.invalidateQueries({ queryKey: ['/api/requests'] });
                queryClient.invalidateQueries({ queryKey: ['/api/requests/urgent'] });
                queryClient.invalidateQueries({ queryKey: ['/api/dashboard/stats'] });
                toast({
                  title: "Dados atualizados",
                  description: "Informações do painel foram atualizadas.",
                });
              }}
              className="flex items-center gap-2"
            >
              <RefreshCw className="h-4 w-4" />
              Atualizar Agora
            </Button>
            <Button
              variant={autoRefreshEnabled ? "default" : "outline"}
              size="sm"
              onClick={() => setAutoRefreshEnabled(!autoRefreshEnabled)}
              className="flex items-center gap-2"
            >
              <RefreshCw className={`h-4 w-4 ${autoRefreshEnabled ? 'animate-spin' : ''}`} />
              {autoRefreshEnabled ? 'Auto: ON' : 'Auto: OFF'}
            </Button>
            <div className="text-xs text-gray-500">
              {autoRefreshEnabled ? (
                <span>A cada 10s</span>
              ) : (
                <span>Manual</span>
              )}
            </div>
          </div>
          <ChangePasswordModal />
          <Button 
            variant="outline" 
            onClick={() => window.location.href = '/api/logout'}
          >
            <X className="h-4 w-4 mr-2" />
            Sair
          </Button>
        </div>
      </div>

      {/* Urgent Requests Alert */}
      {Array.isArray(urgentRequests) && urgentRequests.length > 0 && (
        <Card className="border-red-200 bg-red-50">
          <CardHeader className="pb-3">
            <CardTitle className="text-red-800 flex items-center">
              <AlertTriangle className="mr-2" size={20} />
              Requisições Urgentes ({urgentRequests.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-2">
              {urgentRequests.map((request: any) => (
                <div key={request.id} className="flex items-center justify-between p-3 bg-white rounded border border-red-200">
                  <div>
                    <p className="font-medium text-red-900">{request.patient?.name}</p>
                    <p className="text-sm text-red-700">
                      {request.examType?.name || request.consultationType?.name}
                    </p>
                  </div>
                  <div className="flex space-x-2">
                    {request.status === 'pending' && (
                      <Button 
                        size="sm" 
                        onClick={() => handleStatusChange(request.id, 'accepted')}
                        disabled={updateStatusMutation.isPending}
                      >
                        Aceitar
                      </Button>
                    )}
                    {request.status === 'accepted' && (
                      <Button 
                        size="sm" 
                        onClick={() => handleStatusChange(request.id, 'confirmed')}
                        disabled={updateStatusMutation.isPending}
                      >
                        Confirmar
                      </Button>
                    )}
                    {request.status === 'confirmed' && (
                      <Button 
                        size="sm" 
                        onClick={() => handleCompleteRequest(request)}
                        disabled={updateStatusMutation.isPending}
                      >
                        Concluir
                      </Button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Statistics Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <FileText className="text-blue-600" size={20} />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Recebidas</p>
                <p className="text-2xl font-semibold text-gray-900">{(stats as any)?.received || 0}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <CheckCircle className="text-green-600" size={20} />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Aceitas</p>
                <p className="text-2xl font-semibold text-gray-900">{(stats as any)?.accepted || 0}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <Calendar className="text-yellow-600" size={20} />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Confirmadas</p>
                <p className="text-2xl font-semibold text-gray-900">{(stats as any)?.confirmed || 0}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <Clock className="text-purple-600" size={20} />
              </div>
              <div className="ml-4">
                <p className="text-sm text-gray-600">Concluídas</p>
                <p className="text-2xl font-semibold text-gray-900">{(stats as any)?.completed || 0}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Requests Tabs */}
      <Card>
        <CardHeader>
          <CardTitle>Gerenciamento de Requisições</CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="active">
                Requisições Ativas ({activeRequests.length})
              </TabsTrigger>
              <TabsTrigger value="completed">
                Requisições Concluídas ({completedRequests.length})
              </TabsTrigger>
            </TabsList>
            
            <TabsContent value="active" className="mt-6">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Paciente</TableHead>
                      <TableHead>Solicitação</TableHead>
                      <TableHead>Atendente</TableHead>
                      <TableHead>Data</TableHead>
                      <TableHead>Status</TableHead>

                      <TableHead>Ações</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {activeRequests.map((request: any) => (
                      <TableRow key={request.id}>
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            {/* Image thumbnail if attachment exists */}
                            {request.attachmentFileName && (
                              <Dialog>
                                <DialogTrigger asChild>
                                  <div className="cursor-pointer">
                                    <img 
                                      src={`/api/requests/${request.id}/view-attachment?v=${Math.random()}`}
                                      alt={`Anexo da requisição ${request.id}`}
                                      className="w-24 h-24 object-cover rounded border hover:opacity-80 transition-opacity"
                                      onLoad={() => console.log(`✅ MINIATURA CARREGADA VISUALMENTE - Req ${request.id}`)}
                                      onError={(e) => {
                                        console.error(`❌ ERRO AO CARREGAR MINIATURA - Req ${request.id}:`, e);
                                        (e.target as HTMLImageElement).style.display = 'none';
                                      }}
                                    />
                                  </div>
                                </DialogTrigger>
                                <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
                                  <DialogHeader>
                                    <DialogTitle>Arquivo Anexado - {request.attachmentFileName}</DialogTitle>
                                  </DialogHeader>
                                  <div className="flex flex-col space-y-4">
                                    <div className="flex-1 overflow-auto">
                                      <img 
                                        src={`/api/requests/${request.id}/view-attachment`}
                                        alt="Anexo da requisição"
                                        className="w-full h-auto max-h-[60vh] object-contain border rounded"
                                        style={{ maxWidth: '100%' }}
                                      />
                                    </div>
                                    <div className="flex justify-center">
                                      <Button
                                        onClick={() => {
                                          const link = document.createElement('a');
                                          link.href = `/api/requests/${request.id}/download-attachment`;
                                          link.download = request.attachmentFileName || `anexo-${request.id}`;
                                          document.body.appendChild(link);
                                          link.click();
                                          document.body.removeChild(link);
                                        }}
                                        className="flex items-center space-x-2"
                                      >
                                        <Download className="w-4 h-4" />
                                        <span>Baixar Arquivo</span>
                                      </Button>
                                    </div>
                                  </div>
                                </DialogContent>
                              </Dialog>
                            )}
                            
                            <div>
                              <button 
                                className="text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer text-left"
                                onClick={() => setSelectedRequestForFiles(request)}
                              >
                                {request.patient?.name}
                              </button>
                              <div className="text-sm text-gray-500">
                                {request.patient?.age} anos • {request.patient?.cpf}
                              </div>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-sm text-gray-900">
                          {request.examType?.name || request.consultationType?.name}
                        </TableCell>
                        <TableCell className="text-sm text-gray-900">
                          {request.doctor?.firstName} {request.doctor?.lastName}
                        </TableCell>
                        <TableCell className="text-sm text-gray-500">
                          {new Date(request.createdAt).toLocaleDateString('pt-BR')}
                        </TableCell>
                        <TableCell>
                          {getStatusBadge(request.status, request.isUrgent)}
                        </TableCell>
                        <TableCell>
                          <Button
                            size="sm"
                            variant="outline"
                            onClick={() => setSelectedRequestForDocuments(request)}
                            className="flex items-center space-x-2"
                          >
                            <FileText className="w-4 h-4" />
                            <span>Documentos</span>
                          </Button>
                        </TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            {(request.status === 'received' || request.status === 'pending') && (
                              <Button 
                                size="sm" 
                                onClick={() => handleStatusChange(request.id, 'accepted')}
                                disabled={updateStatusMutation.isPending}
                              >
                                Aceitar
                              </Button>
                            )}
                            {request.status === 'accepted' && (
                              <Button 
                                size="sm" 
                                onClick={() => handleStatusChange(request.id, 'confirmed')}
                                disabled={updateStatusMutation.isPending}
                              >
                                Confirmar
                              </Button>
                            )}
                            {request.status === 'confirmed' && (
                              <Button 
                                size="sm" 
                                onClick={() => handleCompleteRequest(request)}
                                disabled={updateStatusMutation.isPending}
                              >
                                Concluir
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                {activeRequests.length === 0 && (
                  <div className="text-center py-8">
                    <p className="text-gray-500">Nenhuma requisição ativa encontrada</p>
                  </div>
                )}
              </div>
            </TabsContent>

            <TabsContent value="completed" className="mt-6">
              <div className="overflow-x-auto">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Paciente</TableHead>
                      <TableHead>Solicitação</TableHead>
                      <TableHead>Atendente</TableHead>
                      <TableHead>Data</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead>Resultados</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {completedRequests.map((request: any) => (
                      <TableRow key={request.id}>
                        <TableCell>
                          <div className="flex items-center space-x-3">
                            {/* Image thumbnail if attachment exists */}
                            {request.attachmentFileName && (
                              <Dialog>
                                <DialogTrigger asChild>
                                  <div className="cursor-pointer">
                                    <img 
                                      src={`/api/requests/${request.id}/view-attachment?v=${Math.random()}`}
                                      alt={`Anexo da requisição ${request.id}`}
                                      className="w-24 h-24 object-cover rounded border hover:opacity-80 transition-opacity"
                                      onLoad={() => console.log(`✅ MINIATURA CARREGADA VISUALMENTE - Req ${request.id}`)}
                                      onError={(e) => {
                                        console.error(`❌ ERRO AO CARREGAR MINIATURA - Req ${request.id}:`, e);
                                        (e.target as HTMLImageElement).style.display = 'none';
                                      }}
                                    />
                                  </div>
                                </DialogTrigger>
                                <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden">
                                  <DialogHeader>
                                    <DialogTitle>Arquivo Anexado - {request.attachmentFileName}</DialogTitle>
                                  </DialogHeader>
                                  <div className="flex flex-col space-y-4">
                                    <div className="flex-1 overflow-auto">
                                      <img 
                                        src={`/api/requests/${request.id}/view-attachment`}
                                        alt="Anexo da requisição"
                                        className="w-full h-auto max-h-[60vh] object-contain border rounded"
                                        style={{ maxWidth: '100%' }}
                                      />
                                    </div>
                                    <div className="flex justify-center">
                                      <Button
                                        onClick={() => {
                                          const link = document.createElement('a');
                                          link.href = `/api/requests/${request.id}/download-attachment`;
                                          link.download = request.attachmentFileName || `anexo-${request.id}`;
                                          document.body.appendChild(link);
                                          link.click();
                                          document.body.removeChild(link);
                                        }}
                                        className="flex items-center space-x-2"
                                      >
                                        <Download className="w-4 h-4" />
                                        <span>Baixar Arquivo</span>
                                      </Button>
                                    </div>
                                  </div>
                                </DialogContent>
                              </Dialog>
                            )}
                            
                            <div>
                              <button 
                                className="text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline cursor-pointer text-left"
                                onClick={() => setSelectedRequestForFiles(request)}
                              >
                                {request.patient?.name}
                              </button>
                              <div className="text-sm text-gray-500">
                                {request.patient?.age} anos • {request.patient?.cpf}
                              </div>
                            </div>
                          </div>
                        </TableCell>
                        <TableCell className="text-sm text-gray-900">
                          {request.examType?.name || request.consultationType?.name}
                        </TableCell>
                        <TableCell className="text-sm text-gray-900">
                          {request.doctor?.firstName} {request.doctor?.lastName}
                        </TableCell>
                        <TableCell className="text-sm text-gray-500">
                          {new Date(request.createdAt).toLocaleDateString('pt-BR')}
                        </TableCell>
                        <TableCell>
                          {getStatusBadge(request.status, request.isUrgent)}
                        </TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            {request.resultFileName && (
                              <Button
                                size="sm"
                                variant="outline"
                                onClick={() => {
                                  const link = document.createElement('a');
                                  link.href = `/api/requests/${request.id}/download-result`;
                                  link.download = request.resultFileName || `resultado-${request.id}`;
                                  document.body.appendChild(link);
                                  link.click();
                                  document.body.removeChild(link);
                                }}
                                className="flex items-center space-x-2"
                              >
                                <Download className="w-4 h-4" />
                                <span>Baixar</span>
                              </Button>
                            )}
                            <Button
                              size="sm"
                              variant="outline"
                              onClick={() => handleResendWhatsApp(request)}
                              className="flex items-center space-x-2 bg-green-50 hover:bg-green-100 text-green-700 border-green-200"
                            >
                              <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.087z"/>
                              </svg>
                              <span>WhatsApp</span>
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>

                {completedRequests.length === 0 && (
                  <div className="text-center py-8">
                    <p className="text-gray-500">Nenhuma requisição concluída encontrada</p>
                  </div>
                )}
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Patient Details Modal */}
      <PatientDetailsModal
        isOpen={!!selectedPatientId}
        onClose={() => setSelectedPatientId(null)}
        patientId={selectedPatientId || 0}
      />

      {/* Enhanced Patient Details Modal with Files */}
      <PatientDetailsModal
        isOpen={!!selectedRequestForFiles}
        onClose={() => setSelectedRequestForFiles(null)}
        patientId={selectedRequestForFiles?.patient?.id || 0}
        selectedRequest={selectedRequestForFiles}
      />

      {/* Completion Modal */}
      <Dialog open={completionModalOpen} onOpenChange={setCompletionModalOpen}>
        <DialogContent className="sm:max-w-md" aria-describedby="completion-modal-description">
          <DialogHeader>
            <DialogTitle>Concluir Requisição</DialogTitle>
            <p id="completion-modal-description" className="text-sm text-gray-600">
              Preencha as informações do agendamento para enviar via WhatsApp
            </p>
          </DialogHeader>
          
          <div className="space-y-4">
            {selectedRequestForCompletion && (
              <div className="bg-gray-50 p-3 rounded-lg">
                <p className="text-sm font-medium text-gray-900">
                  {selectedRequestForCompletion.patient?.name}
                </p>
                <p className="text-sm text-gray-600">
                  {selectedRequestForCompletion.examType?.name || selectedRequestForCompletion.consultationType?.name}
                </p>
                <p className="text-sm text-gray-500">
                  Tel: {selectedRequestForCompletion.patient?.phone}
                </p>
              </div>
            )}

            <div className="space-y-3">
              <div>
                <label htmlFor="examLocation" className="block text-sm font-medium text-gray-700 mb-1">
                  Local do Exame/Consulta *
                </label>
                <Input
                  id="examLocation"
                  type="text"
                  value={examLocation}
                  onChange={(e) => setExamLocation(e.target.value)}
                  placeholder="Ex: Hospital Municipal"
                  className="w-full"
                />
              </div>

              <div>
                <label htmlFor="examDate" className="block text-sm font-medium text-gray-700 mb-1">
                  Data *
                </label>
                <Input
                  id="examDate"
                  type="date"
                  value={examDate}
                  onChange={(e) => setExamDate(e.target.value)}
                  className="w-full"
                />
              </div>

              <div>
                <label htmlFor="examTime" className="block text-sm font-medium text-gray-700 mb-1">
                  Horário *
                </label>
                <Input
                  id="examTime"
                  type="time"
                  value={examTime}
                  onChange={(e) => setExamTime(e.target.value)}
                  className="w-full"
                />
              </div>

              <div>
                <label htmlFor="resultFile" className="block text-sm font-medium text-gray-700 mb-1">
                  Upload da Cópia do Resultado *
                </label>
                <Input
                  id="resultFile"
                  type="file"
                  accept=".pdf,.jpg,.jpeg,.png"
                  onChange={(e) => setResultFile(e.target.files?.[0] || null)}
                  className="w-full"
                />
                {resultFile && (
                  <p className="text-sm text-gray-600 mt-1">
                    Arquivo selecionado: {resultFile.name}
                  </p>
                )}
              </div>
            </div>

            <div className="flex space-x-2 pt-4">
              <Button
                variant="outline"
                onClick={() => {
                  setCompletionModalOpen(false);
                  setExamLocation("");
                  setExamDate("");
                  setExamTime("");
                  setResultFile(null);
                  setSelectedRequestForCompletion(null);
                }}
                className="flex-1"
              >
                Cancelar
              </Button>
              <Button
                onClick={handleSendWhatsApp}
                disabled={!examLocation || !examDate || !examTime || !resultFile || completeRequestMutation.isPending}
                className="flex-1"
              >
                {completeRequestMutation.isPending ? "Enviando..." : "Enviar WhatsApp"}
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Request Document Manager Modal */}
      <RequestDocumentManager
        isOpen={!!selectedRequestForDocuments}
        onClose={() => setSelectedRequestForDocuments(null)}
        request={selectedRequestForDocuments}
      />
    </div>
  );
}